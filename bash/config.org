#+ -*-org-*- ; Time-stamp: <2012-12-08 01:22:46 leo>

* Constants                                                       :internals:
** Directories
*** reg_dir                                                        :constant:
    The path to the root directory of regulus.
    #+begin_src sh :tangle constants.sh
      reg_dir=~/regulus
    #+end_src

*** reg_dir_bash                                                   :constant:
    The path to the directory of regulus containing the bash scripts
    and configuration.
    #+begin_src sh :tangle constants.sh
      reg_dir_bash=$reg_dir/bash
    #+end_src

*** reg_config_bash                                                :constant:
    The path to this very file.
    #+begin_src sh :tangle constants.sh
         reg_config_bash=$reg_dir_bash/config.org
    #+end_src
** Colors
   By enclosing a string between "$reg_XXX" and "reg_RESET_COLOR", one
   can simply output a string in color XXX in a terminal.
   #+begin_src sh :tangle constants.sh
     reg_RED=$(tput setaf 1)
     reg_GREEN=$(tput setaf 2)
     reg_RESET_COLOR=$(tput sgr0)
   #+end_src
* Dependencies                                                    :internals:
  The idea is to be able to easily install all the packages necessary
  for the scripts to work at once.

  It needs each org-babel LP-script to contain a line with the text
  "Dependencies\:" (note the ':') followed by a space separated list of
  the packages needed.

** reg_list_dependencies                                           :function:
   Lists the dependencies of the scripts in the $Regulus_Dir directory.
   #+begin_src sh :tangle dependencies.sh
     function reg_list_dependencies
     {
         res=""
         for dependency in $(grep "Dependencies\:" $reg_config_bash | cut -d ":" -f 2); do
             res=$res" "$dependency
         done
         echo $res
     }
   #+end_src

** reg_is_installed                                                :function:
   Checks that a package is installed by seeing if it is in the output
   of "dpkg --get-selections".
   #+begin_src sh :tangle dependencies.sh
     function reg_is_installed
     {
         if [[ $(dpkg --get-selections | grep $1) == "" ]]; then
             echo "no"
         else
             echo "yes"
         fi
     }
   #+end_src

** reg_check_dependencies                                          :function:
   Once we know the dependencies of Regulus's scripts, we need to
   check if they are install. To achieve this, we loop through the
   output of reg_list_dependencies and check that each item is
   installed using is_installed.
   #+begin_src sh :tangle dependencies.sh
     function reg_check_dependencies
     {
         for dependency in $(reg_list_dependencies); do
             if [[ $(reg_is_installed $dependency) == "yes" ]]; then
                 echo $dependency' '$reg_GREEN'[yes]'$reg_RESET_COLOR
             else
                 echo $dependency' '$reg_RED'[no]'$reg_RESET_COLOR
             fi
         done
     }
     
   #+end_src
* yell                                                                  :IHM:
  When running heavy scientific computations, it may be annoying to
  check the state every minute. The functions here allow to simply
  point out when a function is done by sending a notification and play
  a nice "beep".
** Dependencies: music123
** reg_yell_CHECKPERIOD                                            :constant:
   The period (in seconds) with which regulus will check if a process
   is done.
   #+begin_src sh :tangle yell.sh
     reg_yell_CHECKPERIOD=1
   #+end_src

** reg_yell_MUSICPLAYER                                            :constant:
   The software to use to play the beep sound.
   #+begin_src sh :tangle yell.sh
     reg_yell_MUSICPLAYER=music123
   #+end_src

** reg_yell_BEEPFILE                                               :constant:
   The file containing the sound to play when computations are done.
   I found it at [[http://soundjax.com/beep-3.html]]
   #+begin_src sh :tangle yell.sh
     reg_yell_BEEPFILE=~/regulus/bash/beep.wav
   #+end_src

** yell                                                            :function:
   When called, sends without further ado a notification with $1 as
   the title and "[done]" as the content and triggers a beep sound as
   well. If no title is given, "[done]" will be the title.
*** Arguments
    - The title to display in the notification
*** Usage
    >-$ Some_long_script with its args && yell
*** Code
    #+begin_src sh :tangle yell.sh
      function yell
      {
          notify-send $1 "[done]" ;
          $reg_yell_MUSICPLAYER $reg_yell_BEEPFILE 2>/dev/null
      }
    #+end_src

** yell_when_done                                                  :function:
   Checks every reg_yell_CHECKPERIOD seconds that a process having the
   string $1 in its name is still running.
*** Usage
    >-$ some_long_script and its args
    >-$ yell_when_done "some string matching the name of the long script"
*** Code
    #+begin_src sh :tangle yell.sh
      function yell_when_done
      {
          processes=$(ps -ef)
          if [[ $(echo $processes | grep $1) == "" ]]; then
              echo "No such process as '"$1"'. Aborting."
          else
              keepGoing=0
              while [[ $keepGoing == 0 ]]; do
                  processes=$(ps -ef)
                  if [[ $(echo $processes | grep $1) == "" ]]; then
                      keepGoing=1
                  else
                      sleep $reg_yell_CHECKPERIOD
                  fi
              done
              yell $1
          fi
      }
    #+end_src
