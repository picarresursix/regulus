# -*-org-*- ; Time-stamp: <2012-12-31 00:21:20 leo>

               YELL


* Introduction
** Purpose
   When running heavy scientific computations, it may be annoying to
   check the state every minute. This script allows to simply point
   out when a function is done by sending a notification and play a
   nice "beep".
** Usage
   >-$ yell "some description"

   Sends a notification with "[done]" as the title and "some
   description" as the content. Is intended to be used like this:

   >-$ some_command_taking_a_while and its arguments && yell description

   >-$ yell -w program
   
   Will yell when no process with "pogram" in their name can be found
   in the output of ps. Is intended to be used if you forgot to put a
   "&& yell" after some long command.   
   
* Dependencies: music123
* Implementation
  Before else, have a shebang and an author.
  #+begin_src sh :shebang "#!/bin/bash" :tangle yell.sh
  # AUTHOR: Leo Perrin <leoperrin@picarresursix.fr>
  #+end_src
** Constants
*** yell_CHECKPERIOD                                               :constant:
    The period (in seconds) with which regulus will check if a process
    is done.
    #+begin_src sh :tangle yell.sh
    yell_CHECKPERIOD=2
    #+end_src

*** yell_MUSICPLAYER                                               :constant:
    The software to use to play the beep sound.
    #+begin_src sh :tangle yell.sh
    yell_MUSICPLAYER=music123
    #+end_src

*** yell_BEEPFILE                                                  :constant:
    The file containing the sound to play when computations are done.
    I found it at [[http://soundjax.com/beep-3.html]]
    #+begin_src sh :tangle yell.sh
      yell_BEEPFILE=~/regulus/yell/beep.wav
    #+end_src

** Functions
*** do_yell                                                        :function:
    When called, sends without further ado a notification with $1 as
    the title and "[done]" as the content and triggers a beep sound as
    well. If no title is given, "[done]" will be the title.
**** Arguments
     - The title to display in the notification
**** Usage
     >-$ Some_long_script with its args && yell_yell some_title
**** Code
     #+begin_src sh :tangle yell.sh
       function do_yell
       {
           notify-send $1 "[done]" ;
           $yell_MUSICPLAYER $yell_BEEPFILE 2>/dev/null
       }
     #+end_src

*** yell_when_done                                                 :function:
    Checks every yell_CHECKPERIOD seconds that a process having the
    string $1 in its name is still running.
**** Usage
     >-$ some_long_script and its args
     >-$ yell_when_done "some string matching the name of the long script"
**** Code
     We have to separate the call to "ps" from the "grep" because
     otherwise, grep would catch the process corresponding to itself!
     #+begin_src sh :tangle yell.sh
       function yell_when_done
       {
           processes=$(ps -ef)
           if [[ $(grep $1 <<< $processes) == "" ]]; then
               echo "No such process as '"$1"'. Aborting."
           else
               echo "Process found"
               keepGoing=0
               while [[ $keepGoing == 0 ]]; do
                   processes=$(ps -ef)
                   if [[ $(grep $1 <<< $processes) == "" ]]; then
                       keepGoing=1
                   else
                       sleep $yell_CHECKPERIOD
                   fi
               done
               do_yell $1
           fi
       }
     #+end_src

** Main script
   Remember: the main script calls the do_yell function if no other
   option/parameter are given. The w option corresponds to the case
   where we want to yell after a program which is already launched.
   #+begin_src sh :tangle yell.sh
     yell_when=0
     while getopts ":w:" option
     do
         case $option in
             w)
                 yell_when=1
                 if [[ $# < 2 ]]
                 then
                     echo "I need a string to search in the process's name!"
                 else
                     yell_when_done $2
                 fi
                 ;;
         esac
     done
     if [[ $yell_when == 0 ]]
     then
         do_yell $1
     fi

   #+end_src
