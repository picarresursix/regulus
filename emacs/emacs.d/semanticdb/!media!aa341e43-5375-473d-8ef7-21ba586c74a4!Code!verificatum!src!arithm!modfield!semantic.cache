;; Object modfield/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "modfield/"
  :tables (list 
   (semanticdb-table "modfield.hpp"
    :major-mode 'c++-mode
    :tags 
        '( ("_MODFIELD_H_" variable (:constant-flag t) nil [238 250])
            ("_MODFIELD_H_" variable (:constant-flag t) nil [238 250])
            ("_MODFIELD_H_" variable (:constant-flag t) nil [238 250])
            ("../field/field.hpp" include nil nil [252 281])
            ("arithm" type
               (:members 
                  ( ("ModField" type
                       (:superclasses 
                          ( ("Field" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :members 
                          ( ("public" label nil (reparse-symbol classsubparts) [426 433])
                            ("ModField" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("order" variable (:type ("mpz_class" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [642 658]))                                  
                                :type "int")
                                (reparse-symbol classsubparts) [633 659])
                            ("multiplication" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("e1" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [689 697])
                                    ("e2" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [698 706]))                                  
                                :type ("Elmt" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [669 707])
                            ("multInverse" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [733 740]))                                  
                                :type ("Elmt" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [716 741])
                            ("exponentiation" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [770 777])
                                    ("s" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [778 785]))                                  
                                :type ("Elmt" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [750 786])
                            ("addition" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("e1" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [809 817])
                                    ("e2" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [818 826]))                                  
                                :type ("Elmt" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [795 827])
                            ("addInverse" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [852 859]))                                  
                                :type ("Elmt" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [836 860])
                            ("getType" function
                               (:prototype-flag t
                                :type ("std::string" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [869 891]))                          
                        :type "class")
                        (reparse-symbol namespacesubparts) [394 894]))                  
                :type "namespace")
                nil [284 897]))          
    :file "modfield.hpp"
    :pointmax 735
    :fsize 927
    :lastmodtime '(20534 19707)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("_MODFIELD_H_")
          )

    )
   (semanticdb-table "modfield.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("modfield.hpp" include nil nil [210 233])
            ("arithm" using (:type ("arithm" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [236 259])
            ("ModField" function
               (:constructor-flag t
                :parent "ModField"
                :arguments 
                  ( ("order" variable (:type ("mpz_class" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [281 297]))                  
                :type ("ModField" type (:type "class") nil nil))
                nil [262 378])
            ("multiplication" function
               (:parent "ModField"
                :arguments 
                  ( ("e1" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [411 419])
                    ("e2" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [420 428]))                  
                :type ("Elmt" type (:type "class") nil nil))
                nil [381 503])
            ("multInverse" function
               (:parent "ModField"
                :arguments 
                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [533 540]))                  
                :type ("Elmt" type (:type "class") nil nil))
                nil [506 748])
            ("exponentiation" function
               (:parent "ModField"
                :arguments 
                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [781 788])
                    ("s" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [789 796]))                  
                :type ("Elmt" type (:type "class") nil nil))
                nil [751 1029])
            ("addition" function
               (:parent "ModField"
                :arguments 
                  ( ("e1" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1056 1064])
                    ("e2" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1065 1073]))                  
                :type ("Elmt" type (:type "class") nil nil))
                nil [1032 1148])
            ("addInverse" function
               (:parent "ModField"
                :arguments 
                  ( ("e" variable (:type ("Elmt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1177 1184]))                  
                :type ("Elmt" type (:type "class") nil nil))
                nil [1151 1240])
            ("getType" function
               (:parent "ModField"
                :type ("std::string" type (:type "class") nil nil))
                nil [1243 1305]))          
    :file "modfield.cpp"
    :pointmax 1293
    :fsize 1306
    :lastmodtime '(20534 19748)
    :unmatched-syntax 'nil
    )
   )
  :file "!media!aa341e43-5375-473d-8ef7-21ba586c74a4!Code!verificatum!src!arithm!modfield!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.0"
  )
